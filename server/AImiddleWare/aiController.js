import aiService from "../AIservices/aiService.js";

// Map generic search terms to specific models for immediate handling at controller level
const GENERIC_MAPPINGS = {
  'air jordan 1 low': 'Nike Air Jordan 1 Low',
  'nike air jordan 1 low': 'Nike Air Jordan 1 Low',
  'men\'s air jordan 1 low': 'Nike Air Jordan 1 Low', 
  'nike men\'s air jordan 1 low': 'Nike Air Jordan 1 Low',
  'nike men\'s air jordan 1 low shoes': 'Nike Air Jordan 1 Low',
  'nike air jordan 1 low shoes': 'Nike Air Jordan 1 Low',
  'air jordan 1 low shoes': 'Nike Air Jordan 1 Low',
  'jordan 1 low shoes': 'Nike Air Jordan 1 Low',
  'jordan 1 low': 'Nike Air Jordan 1 Low',
  'dunk low': 'Nike Dunk Low',
  'nike dunk low': 'Nike Dunk Low',
  'air force 1': 'Nike Air Force 1 Low White',
  'nike air force 1': 'Nike Air Force 1 Low White',
  'air force 1 low': 'Nike Air Force 1 Low White',
  'nike air force 1 low': 'Nike Air Force 1 Low White',
};

const getReview = async (req, res) => {
  let code = req.body.code;
  console.log("Received search query:", code);

  if (!code) {
    return res.status(400).json({ message: "Search query is required" });
  }
  
  // Check if the search term is a generic one that should be mapped
  const lowerCode = code.toLowerCase().trim();
  let mappedCode = null;
  
  // First check for exact matches
  if (GENERIC_MAPPINGS[lowerCode]) {
    mappedCode = GENERIC_MAPPINGS[lowerCode];
    console.log(`Direct mapping found: "${code}" → "${mappedCode}"`);
  } else {
    // Then check for partial matches
    for (const [generic, specific] of Object.entries(GENERIC_MAPPINGS)) {
      if (lowerCode.includes(generic)) {
        mappedCode = specific;
        console.log(`Partial mapping found: "${code}" → "${mappedCode}" (matched "${generic}")`);
        break;
      }
    }
  }
  
  // Use the mapped code if available, otherwise use the original
  if (mappedCode) {
    code = mappedCode;
    console.log("Using mapped search term:", code);
  }

  try {
    console.log("Processing search query:", code);
    const response = await aiService(code); // Call AI service to generate review
    console.log("AI response generated successfully");
    
    if (!response) {
      return res.status(500).json({ message: "No response generated by AI service" });
    }
    
    res.json(response); // Send the AI response back to the client
  } catch (error) {
    console.error("Error processing AI request:", error);
    res.status(500).json({ 
      message: "Error processing AI request", 
      error: error.message 
    });
  }
};

export default getReview;
